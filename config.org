#+title: İsmail Efe Top's Doom Emacs Config
#+AUTHOR: İsmail Efe Top
#+PROPERTY: header-args :tangle /Users/ismailefetop/.config/doom/config.el
#+auto_tangle: t

# first year in uni, mba2022

* One Liners
** My contact information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "İsmail Efe Top"
      user-mail-address "ismailefetop@gmail.com")
#+END_SRC
** Setting the default shell
#+BEGIN_SRC emacs-lisp
(setq shell-file-name (executable-find "bash"))
(setq-default vterm-shell (executable-find "fish"))
(setq-default explicit-shell-file-name (executable-find "fish"))
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'kanagawa)
#+END_SRC

*** Good themes
- doom-dracula
- kanagawa
- Catppuccin

** Font
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 22))
#+END_SRC

** Line Numbers
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)
#+END_SRC

** Disable Confirm on exit.
#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs nil)
#+END_SRC

** Disable autosave
#+BEGIN_SRC emacs-lisp
;disable backup
 (setq backup-inhibited t)
;disable auto save
 (setq auto-save-default nil)
#+END_SRC

** [[https://emacsredux.com/blog/2020/07/18/automatically-kill-running-processes-on-exit/][Automatically Kill Running Processes on Exit]]
#+begin_src emacs-lisp
(setq confirm-kill-processes nil)
#+end_src

** Zoom
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+END_SRC
** Enable Word Count
#+begin_src emacs-lisp
(setq doom-modeline-enable-word-count t)
#+end_src
** Disable unnecessary new os windows
#+begin_src emacs-lisp
(setq use-dialog-box nil)'
#+end_src
** Calendar
*** Make calendar start on monday
#+begin_src emacs-lisp
(setq calendar-week-start-day 1)
#+end_src

** Sets olivettis body width
#+BEGIN_SRC emacs-lisp
(setq olivetti-body-width 94)
#+END_SRC
** Cargo binary
#+begin_src emacs-lisp
;;(setq exec-path (append exec-path '("/Users/ismailefetop/.cargo/bin/")))

#+end_src

** Default Bib File
#+begin_src emacs-lisp
(setq org-cite-global-bibliography '("/Users/ismailefetop/uni/citation/bib.bib"))
(setq! bibtex-completion-bibliography '("/Users/ismailefetop/uni/citation/bib.bib"))
(setq! citar-bibliography '("/Users/ismailefetop/uni/citation/bib.bib"))
#+end_src

** Super-save
#+begin_src emacs-lisp
(super-save-mode +1)
#+end_src

** Opening Large Files
#+begin_src emacs-lisp
;; warn when opening files bigger than 200MB
(setq large-file-warning-threshold 200000000)
#+end_src

** Disable hl-line-mode
#+begin_src emacs-lisp
(remove-hook 'doom-first-buffer-hook #'global-hl-line-mode)
#+end_src

** Make the title bar text empty :mac:
#+begin_src emacs-lisp
(setq ns-use-proxy-icon nil)
(setq frame-title-format nil)
#+end_src
** Open olivetti Mode
#+begin_src emacs-lisp
;; (add-hook 'org-mode-hook 'olivetti-mode)
#+end_src
* Pandoc
** Set Pandoc Binary :mac:
#+BEGIN_SRC emacs-lisp
(setq pandoc-binary "/opt/homebrew/bin/pandoc")
#+END_SRC
** Global Settings/Data File :mac:
#+begin_src emacs-lisp
(setq pandoc-data-dir "/Users/ismailefetop/.config/doom/etc/pandoc/")
#+end_src
* Org
** Org directories
*** Main Directory :mac:
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/.orgs/org/")
#+END_SRC

*** Other Org Directories :mac:
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/uni/current-course/" "~/.orgs/org/" "~/ideas/" "/Users/ismailefetop/Library/Mobile Documents/com~apple~CloudDocs/org/"))
#+END_SRC

** Trusting the org-blocks in org automatically
#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC
** Change the look of org-agenda to-do view.
#+begin_src emacs-lisp
(setq org-agenda-prefix-format
      '((agenda . " %i %-12:c%?-12t% s")
        (todo   . " ")
        (tags   . " %i %-12:c")
        (search . " %i %-12:c")))
#+end_src
** to open emacs with orgmode
*** Define the keyboard shortcut as a string
#+BEGIN_SRC emacs-lisp
(setq my-keyboard-shortcut "SPC o a a n")
#+END_SRC

*** Define a function to execute the keyboard shortcut
#+BEGIN_SRC emacs-lisp
(defun my-send-keyboard-shortcut ()
  (interactive)
  (execute-kbd-macro (kbd my-keyboard-shortcut)))
#+END_SRC

*** Call the function when Emacs starts up
#+BEGIN_SRC emacs-lisp
;; (add-hook 'emacs-startup-hook 'my-send-keyboard-shortcut)
#+END_SRC

** Set Agenda View
#+BEGIN_SRC emacs-lisp
(use-package! org
  :config
  ;; to start the agende from the current day
  (setq org-agenda-start-on-weekday nil)
  (setq org-agenda-start-day "+0d")
  ;; set span 7
  (setq org-agenda-span 7)
  ;; Add additional configuration here
  )
#+END_SRC

** Org Capture Templates :mac:
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-capture-templates
        '(("t" "School Todo" entry (file+olp+datetree "~/uni/current-course/todo.org")
           "* TODO %?\n  %i\n  %a")
          ("j" "Journal" entry (file+olp+datetree "~/org/journal.org")
           "* %?\nEntered on %U\n  %i\n  %a")
          ("n" "Class Note" entry (file+olp+datetree "~/uni/current-course/notes/%A.org")
           "* %?\nEntered on %U\n  %i\n  %a")))
)

#+END_SRC
** Org Auto Tangle
#+BEGIN_SRC emacs-lisp
   (require 'org-auto-tangle)

(add-hook 'org-mode-hook 'org-auto-tangle-mode)
#+END_SRC
* Functions
** Copy Path Function :mac:
#+BEGIN_SRC emacs-lisp
(defun open-finder-and-copy-path ()
  "Open Finder and copy the selected file's path."
  (interactive)
  (let ((file-path (read-file-name "Select a file: ")))
    (kill-new file-path)
    (message "Copied file path: %s" file-path)
    (start-process "finder" nil "open" "-R" file-path)))
(defun close-all-buffers ()
(interactive)
  (mapc 'kill-buffer (buffer-list)))
#+END_SRC
** Reading Mode
#+begin_src emacs-lisp
(defun efe/reading-mode ()
  "Toggle reading mode."
  (interactive)
  (hide-mode-line-mode +1)
  ;; (load-theme 'kanagawa)
  (olivetti-mode)
  ;; (setq hl-line-mode nil)
  (menu-bar--display-line-numbers-mode-none))
(global-set-key (kbd "C-ö") 'efe/reading-mode)

#+end_src
** Undo Reading Mode
#+begin_src emacs-lisp
(defun efe/undo-reading-mode ()
  "undo reading mode."
  (interactive)
  ;; (disable-theme 'kanagawa)

  ;; (load-theme 'doom-dracula t)

  (hide-mode-line-mode -1)
  (setq olivetti-mode nil)
  ;; (setq hl-line-mode t)
  (menu-bar--display-line-numbers-mode-absolute))
(global-set-key (kbd "C-ç") 'efe/undo-reading-mode)
#+end_src
** Export to docx
#+begin_src emacs-lisp
(defun efe/export-to-docx ()
  "Output to docx using pandoc-mode"
  (interactive)
  (pandoc-mode)
  (execute-kbd-macro (kbd "C-c / O W d b b r"))
  (setq pandoc-mode nil)
  )
#+end_src
#+begin_src emacs-lisp
(defun insert-idiom-template ()
  "Inserts a template for an idiom."
  (interactive)
  (insert "\n* Idiom\n"
          "- *Meaning:*\n"
          "- *Example Sentence:*\n"
          "- *Source:*\n"
          "- *Date:*\n"))
#+end_src
* Snippet Templates
** Week Templates
#+begin_src emacs-lisp
(set-file-template! "\\.org$" :trigger "__week.org" :mode 'org-mode)
#+end_src

* Defaults
** Email Client
#+BEGIN_SRC emacs-lisp
(setq browse-url-mailto-function 'browse-url-generic)
(setq browse-url-generic-program "open")
#+END_SRC
** Openwith Defaults :mac:
#+BEGIN_SRC emacs-lisp
(require 'openwith)
(openwith-mode t)
(setq openwith-associations
      '(("\\.pdf\\'" "open" (file))
        ("\\.docx\\'" "open" (file))
        ("\\.jpg\\'" "open" (file))
        ("\\.jpeg\\'" "open" (file))
        ("\\.png\\'" "open" (file))
        ("\\.pptx\\'" "open" (file))
        ("\\.epub\\'" "open" (file))
        ;; ("\\.svg\\'" "open" (file))
        ("\\.gif\\'" "open" (file))
        ;; Add more image formats as needed
        ))
#+END_SRC

* Dictionary Servers
** Merriam-Webster Thesaurus
#+BEGIN_SRC emacs-lisp
(use-package! mw-thesaurus
  :defer t
  :commands mw-thesaurus-lookup-dwim
  :hook (mw-thesaurus-mode . variable-pitch-mode)
  :config
  (map! :map mw-thesaurus-mode-map [remap evil-record-macro] #'mw-thesaurus--quit)

  ;; window on the right side
  (add-to-list
   'display-buffer-alist
   `(,mw-thesaurus-buffer-name
     (display-buffer-reuse-window
      display-buffer-in-direction)
     (direction . right)
     (window . root)
     (window-width . 0.3))))
#+END_SRC

** Emacs Dictionary
#+begin_src emacs-lisp
(setq dictionary-server "dict.org")
#+end_src
* After Save hook
#+begin_src emacs-lisp
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)
#+end_src
* Garbage collection
#+BEGIN_SRC emacs-lisp
(after! gcmh
  (setq gcmh-high-cons-threshold (* 64 1048576)))
#+END_SRC
* Make emacs silent
#+begin_src emacs-lisp
(setq byte-compile-warnings '(not obsolete))
(setq warning-suppress-log-types '((comp) (bytecomp)))
(setq native-comp-async-report-warnings-errors 'silent)
(setq inhibit-startup-echo-area-message (user-login-name))

#+end_src
* Presentation
** Make images adjust to width
#+begin_src emacs-lisp
(setq org-image-actual-width nil)
#+end_src
** bi"u
* Startup
** Maximize on startup using Rectangle :mac:
#+begin_src emacs-lisp
;; Requires the mac app Rectangle to function.
(defun rectangle-maximize ()
  "Execute a shell command when Emacs starts."
  (call-process-shell-command "open -g 'rectangle://execute-action?name=maximize'" nil 0))

;; Add the function to the Emacs startup hook
(add-hook 'emacs-startup-hook 'rectangle-maximize)
#+end_src
* Notes for myself
** Doom Doctor warnings.
*** ! The installed ripgrep binary was not built with support for PCRE lookaheads.
#+begin_src shell :tangle no
  brew uninstall ripgrep
  brew install rust
  cargo install --features pcre2 ripgrep
#+end_src

*** ! The installed grep binary was not built with support for PCRE lookaheads.
#+begin_src shell :tangle no
brew install grep
# In .zshrc/.bashrc
if [ -d "$(brew --prefix)/opt/grep/libexec/gnubin" ]; then
    PATH="$(brew --prefix)/opt/grep/libexec/gnubin:$PATH"
fi
#+end_src

*** :lang sh ! Couldn't find shellcheck. Shell script linting will not work
#+begin_src shell :tangle no
   npm install -g marked
   brew install shellcheck
#+end_src

** to make latex and latex export work the code snippet below have to be excuted
# thanks to https://tex.stackexchange.com/a/385125

#+begin_src shell :tangle no
brew install basictex
cd /Library/TeX/texbin
sudo tlmgr update --self
sudo tlmgr install wrapfig
sudo tlmgr install marvosym
sudo tlmgr install wasysym
sudo tlmgr install capt-of
sudo tlmgr instal dvipng
sudo tlmgr instal soul
#+end_src

** to save window site(causes graphical errors)
#+BEGIN_SRC emacs-lisp :tangle no
  ;; remember window position
  (desktop-save-mode 1)
#+end_src
** Disabling tilde outside of doom emacs
#+begin_src emacs-lisp :tangle no
(remove-hook 'text-mode-hook #'vi-tilde-fringe-mode)
(remove-hook 'doom-first-buffer-hook #'global-vi-tilde-fringe-mode)
#+end_src

** Using emacs-plus
*** Installing
#+begin_src shell :tangle no
brew tap d12frosted/emacs-plus
brew install emacs-plus --with-native-comp --with-imagemagick --with-retro-emacs-logo-icon
#+end_src
*** Background service
#+begin_src shell :tangle no
#To start d12frosted/emacs-plus/emacs-plus@29 now and restart at login:

brew services start d12frosted/emacs-plus/emacs-plus@29

#Or, if you don't want/need a background service you can just run:

/opt/homebrew/opt/emacs-plus@29/bin/emacs =fg-daemon
#+end_src
** To only show todo list on custom agenda
#+begin_src emacs-lisp :tangle no
(setq org-agenda-custom-commands
      '(("n" "Agenda and all TODOs"
        ((alltodo "")
         ))))
#+end_src

* Testing
#+begin_src emacs-lisp
#+end_src
