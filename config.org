#+title: İsmail Efe Top's Doom Emacs Config
#+AUTHOR: İsmail Efe Top
#+PROPERTY: header-args :tangle /Users/ismailefetop/.config/doom/config.el
#+auto_tangle: t

# first year in uni, mba2022

* Table Of Content :toc:
- [[#one-liners][One Liners]]
  - [[#my-contact-information][My contact information]]
  - [[#theme][Theme]]
  - [[#font][Font]]
  - [[#line-numbers][Line Numbers]]
  - [[#disable-confirm-on-exit][Disable Confirm on exit.]]
  - [[#disable-autosave][Disable autosave]]
  - [[#automatically-kill-running-processes-on-exit][Automatically Kill Running Processes on Exit]]
  - [[#csv][CSV]]
  - [[#zoom][Zoom]]
  - [[#calendar][Calendar]]
  - [[#pandoc][Pandoc]]
  - [[#sets-olivettis-body-width][Sets olivettis body width]]
  - [[#super-save][Super-save]]
  - [[#opening-large-files][Opening Large Files]]
- [[#org][Org]]
  - [[#org-directories][Org directories]]
  - [[#trusting-the-org-blocks-in-org-automatically][Trusting the org-blocks in org automatically]]
  - [[#to-open-emacs-with-orgmode][to open emacs with orgmode]]
  - [[#set-agenda-view][Set Agenda View]]
  - [[#org-capture-templates][Org Capture Templates]]
  - [[#org-auto-tangle][Org Auto Tangle]]
- [[#functions][Functions]]
  - [[#heading-inserting][heading inserting]]
  - [[#copy-path-function][Copy Path Function]]
  - [[#reading-mode][Reading Mode]]
  - [[#undo-reading-mode][Undo Reading Mode]]
- [[#defaults][Defaults]]
  - [[#email-client][Email Client]]
  - [[#openwith-defaults][Openwith Defaults]]
- [[#dictionary-servers][Dictionary Servers]]
  - [[#merriam-webster-thesaurus][Merriam-Webster Thesaurus]]
  - [[#emacs-dictionary][Emacs Dictionary]]
- [[#after-save-hook][After Save hook]]
- [[#garbage-collection][Garbage collection]]
- [[#notes-for-myself][Notes for myself]]
  - [[#doom-doctor-warnings][Doom Doctor warnings.]]
  - [[#to-make-latex-and-latex-export-work-the-code-snippet-below-have-to-be-excuted][to make latex and latex export work the code snippet below have to be excuted]]
  - [[#to-save-window-sitecauses-graphical-errors][to save window site(causes graphical errors)]]
  - [[#using-emacs-plus][Using emacs-plus]]
- [[#testing][Testing]]

* One Liners
** My contact information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "İsmail Efe Top"
      user-mail-address "ismailefetop@gmail.com")
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-dracula)
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 22))
#+END_SRC

** Line Numbers
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)
#+END_SRC

** Disable Confirm on exit.
#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs nil)
#+END_SRC

** Disable autosave
#+BEGIN_SRC emacs-lisp
;disable backup
 (setq backup-inhibited t)
;disable auto save
 (setq auto-save-default nil)
#+END_SRC

** [[https://emacsredux.com/blog/2020/07/18/automatically-kill-running-processes-on-exit/][Automatically Kill Running Processes on Exit]]
#+begin_src emacs-lisp
(setq confirm-kill-processes nil)
#+end_src

** CSV
#+begin_src emacs-lisp
(setq csv-separators '("," "    "))
#+end_src

** Zoom
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+END_SRC

** Calendar
*** Make calendar start on monday
#+begin_src emacs-lisp
(setq calendar-week-start-day 1)
#+end_src

** Pandoc
#+BEGIN_SRC emacs-lisp
(add-hook 'markdown-mode-hook 'pandoc-mode)
(setq pandoc-binary "/opt/homebrew/bin/pandoc")
#+END_SRC

** Sets olivettis body width
#+BEGIN_SRC emacs-lisp
(setq olivetti-body-width 100)
#+END_SRC

** Super-save
#+begin_src emacs-lisp
(super-save-mode +1)
#+end_src

** Opening Large Files
#+begin_src emacs-lisp
;; warn when opening files bigger than 200MB
(setq large-file-warning-threshold 200000000)
#+end_src
* Org
** Org directories
*** Main Directory
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/.orgs/org/")
#+END_SRC

*** Other Org Directories
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/uni/current-course/" "~/.orgs/org/" "/Users/ismailefetop/Library/Mobile Documents/com~apple~CloudDocs/org/"))
#+END_SRC

** Trusting the org-blocks in org automatically
#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

** to open emacs with orgmode
*** Define the keyboard shortcut as a string
#+BEGIN_SRC emacs-lisp
(setq my-keyboard-shortcut "SPC o a a n")
#+END_SRC

*** Define a function to execute the keyboard shortcut
#+BEGIN_SRC emacs-lisp
(defun my-send-keyboard-shortcut ()
  (interactive)
  (execute-kbd-macro (kbd my-keyboard-shortcut)))
#+END_SRC

*** Call the function when Emacs starts up
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook 'my-send-keyboard-shortcut)
#+END_SRC

** Set Agenda View
#+BEGIN_SRC emacs-lisp
(use-package! org
  :config
  ;; to start the agende from the current day
  (setq org-agenda-start-on-weekday nil)
  (setq org-agenda-start-day "+0d")
  ;; set span 7
  (setq org-agenda-span 7)
  ;; Add additional configuration here
  )
#+END_SRC

** Org Capture Templates
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-capture-templates
        '(("t" "School Todo" entry (file+olp+datetree "~/uni/current-course/todo.org" "Tasks")
           "* TODO %?\n  %i\n  %a")
          ("j" "Journal" entry (file+olp+datetree "~/org/journal.org")
           "* %?\nEntered on %U\n  %i\n  %a")
          ("n" "Class Note" entry (file+olp+datetree "~/uni/current-course/notes/%A.org")
           "* %?\nEntered on %U\n  %i\n  %a")))
)

#+END_SRC
** Org Auto Tangle
#+BEGIN_SRC emacs-lisp
   (require 'org-auto-tangle)

(add-hook 'org-mode-hook 'org-auto-tangle-mode)
#+END_SRC
* Functions
** heading inserting
#+begin_src emacs-lisp
(define-skeleton künye
"Header info for an Org file."
"Title: ""#+TITLE:" str " \n"
"#+AUTHOR: " user-full-name "\n"
"#+DATE: " (format-time-string "%Y-%m-%d") "\n")
#+end_src

** Copy Path Function
#+BEGIN_SRC emacs-lisp
(defun open-finder-and-copy-path ()
  "Open Finder and copy the selected file's path."
  (interactive)
  (let ((file-path (read-file-name "Select a file: ")))
    (kill-new file-path)
    (message "Copied file path: %s" file-path)
    (start-process "finder" nil "open" "-R" file-path)))
(defun close-all-buffers ()
(interactive)
  (mapc 'kill-buffer (buffer-list)))
#+END_SRC
** Reading Mode
#+begin_src emacs-lisp
(defun reading-mode ()
  "Toggle reading mode."
  (interactive)
  (hide-mode-line-mode +1)
  (olivetti-mode)
  (menu-bar--display-line-numbers-mode-none))
#+end_src
** Undo Reading Mode
#+begin_src emacs-lisp
(defun undo-reading-mode ()
  "undo reading mode."
  (interactive)
  (hide-mode-line-mode -1)
  (setq olivetti-mode nil)
  (menu-bar--display-line-numbers-mode-absolute))
#+end_src
* Defaults
** Email Client
#+BEGIN_SRC emacs-lisp
(setq browse-url-mailto-function 'browse-url-generic)
(setq browse-url-generic-program "open")
#+END_SRC
** Openwith Defaults
#+BEGIN_SRC emacs-lisp
(require 'openwith)
(openwith-mode t)
(setq openwith-associations
      '(("\\.pdf\\'" "open" (file))
        ("\\.docx\\'" "open" (file))
        ("\\.jpg\\'" "open" (file))
        ("\\.jpeg\\'" "open" (file))
        ("\\.png\\'" "open" (file))
        ("\\.svg\\'" "open" (file))
        ("\\.gif\\'" "open" (file))
        ;; Add more image formats as needed
        ))
#+END_SRC

* Dictionary Servers
** Merriam-Webster Thesaurus
#+BEGIN_SRC emacs-lisp
(use-package! mw-thesaurus
  :defer t
  :commands mw-thesaurus-lookup-dwim
  :hook (mw-thesaurus-mode . variable-pitch-mode)
  :config
  (map! :map mw-thesaurus-mode-map [remap evil-record-macro] #'mw-thesaurus--quit)

  ;; window on the right side
  (add-to-list
   'display-buffer-alist
   `(,mw-thesaurus-buffer-name
     (display-buffer-reuse-window
      display-buffer-in-direction)
     (direction . right)
     (window . root)
     (window-width . 0.3))))
#+END_SRC

** Emacs Dictionary
#+begin_src emacs-lisp
(setq dictionary-server "dict.org")
#+end_src
* After Save hook
#+begin_src emacs-lisp
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)
#+end_src
* Garbage collection
#+BEGIN_SRC emacs-lisp
(after! gcmh
  (setq gcmh-high-cons-threshold (* 64 1048576)))
#+END_SRC
* Notes for myself
** Doom Doctor warnings.
*** ! The installed ripgrep binary was not built with support for PCRE lookaheads.
#+begin_src shell :tangle no
  brew uninstall ripgrep
  brew install rust
  cargo install --features pcre2 ripgrep
#+end_src

*** ! The installed grep binary was not built with support for PCRE lookaheads.
#+begin_src shell :tangle no
brew install grep
# In .zshrc/.bashrc
if [ -d "$(brew --prefix)/opt/grep/libexec/gnubin" ]; then
    PATH="$(brew --prefix)/opt/grep/libexec/gnubin:$PATH"
fi
#+end_src

*** :lang sh ! Couldn't find shellcheck. Shell script linting will not work
#+begin_src shell :tangle no
   npm install -g marked
   brew install shellcheck
#+end_src

** to make latex and latex export work the code snippet below have to be excuted
# thanks to https://tex.stackexchange.com/a/385125

#+begin_src shell :tangle no
brew install basictex
cd /Library/TeX/texbin
sudo tlmgr update --self
sudo tlmgr install wrapfig
sudo tlmgr install marvosym
sudo tlmgr install wasysym
sudo tlmgr install capt-of
#+end_src

** to save window site(causes graphical errors)
#+BEGIN_SRC emacs-lisp :tangle no
  ;; remember window position
  (desktop-save-mode 1)
#+end_src
** Using emacs-plus
*** Installing
#+begin_src shell :tangle no
brew tap d12frosted/emacs-plus
brew install emacs-plus --with-native-comp --with-imagemagick --with-retro-emacs-logo-icon
#+end_src
*** Background service
#+begin_src shell :tangle no
#To start d12frosted/emacs-plus/emacs-plus@29 now and restart at login:

brew services start d12frosted/emacs-plus/emacs-plus@29

#Or, if you don't want/need a background service you can just run:

/opt/homebrew/opt/emacs-plus@29/bin/emacs =fg-daemon
#+end_src
* Testing
